<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultError" xml:space="preserve">
    <value>Ocorreu um erro desconhecido.</value>
    <comment>Default identity result error message</comment>
  </data>
  <data name="DuplicateEmail" xml:space="preserve">
    <value>Este e-mail '{0}' já esta em uso.</value>
    <comment>error for duplicate emails</comment>
  </data>
  <data name="DuplicateName" xml:space="preserve">
    <value>O nome '{0}' já está em uso.</value>
    <comment>error for duplicate usernames</comment>
  </data>
  <data name="ExternalLoginExists" xml:space="preserve">
    <value>Já existe um usuário com esse login externo!</value>
    <comment>Error when a login already linked</comment>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>O email '{0}' é inválido</value>
    <comment>invalid email</comment>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>Token Inválido</value>
    <comment>Error when a token is not recognized</comment>
  </data>
  <data name="InvalidUserName" xml:space="preserve">
    <value>O nome do usuário '{0}' é inválido; ele só pode conter letras ou números.</value>
    <comment>usernames can only contain letters or digits</comment>
  </data>
  <data name="LockoutNotEnabled" xml:space="preserve">
    <value>O bloqueio não está habilitado para este usuário.</value>
    <comment>error when lockout is not enabled</comment>
  </data>
  <data name="NoTokenProvider" xml:space="preserve">
    <value>Nenhum IUserTokenProvider está registrado!</value>
    <comment>Error when there is no IUserTokenProvider</comment>
  </data>
  <data name="NoTwoFactorProvider" xml:space="preserve">
    <value>Nenhum IUserTwoFactorProvider para '{0}' está registrado!</value>
    <comment>Error when there is no provider found</comment>
  </data>
  <data name="PasswordMismatch" xml:space="preserve">
    <value>Senha incorreta.</value>
    <comment>Error when a password doesn't match</comment>
  </data>
  <data name="PasswordRequiresDigit" xml:space="preserve">
    <value>As senhas devem ter pelo menos um dígito ('0'-'9')!</value>
    <comment>Error when passwords do not have a digit</comment>
  </data>
  <data name="PasswordRequiresLower" xml:space="preserve">
    <value>As senhas devem ter pelo menos uma letra minúscula ('a'-'z')!</value>
    <comment>Error when passwords do not have a lowercase letter</comment>
  </data>
  <data name="PasswordRequiresNonLetterOrDigit" xml:space="preserve">
    <value>As senhas devem ter pelo menos um caractere sem letra ou dígito!</value>
    <comment>Error when password does not have enough letter or digit characters</comment>
  </data>
  <data name="PasswordRequiresUpper" xml:space="preserve">
    <value>As senhas devem ter pelo menos uma letra maiúscula ('A'-'Z')!</value>
    <comment>Error when passwords do not have an uppercase letter</comment>
  </data>
  <data name="PasswordTooShort" xml:space="preserve">
    <value>As senhas devem ter pelo menos {0} caracteres.</value>
    <comment>Error message for passwords that are too short</comment>
  </data>
  <data name="PropertyTooShort" xml:space="preserve">
    <value>'{0}' não pode ser nulo ou estar vazio.</value>
    <comment>error for empty or null usernames</comment>
  </data>
  <data name="RoleNotFound" xml:space="preserve">
    <value>A função '{0}' não existe</value>
    <comment>error when a role does not exist</comment>
  </data>
  <data name="StoreNotIQueryableRoleStore" xml:space="preserve">
    <value>Store não implementa IQueryableRoleStore&lt;TRole&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIQueryableUserStore" xml:space="preserve">
    <value>O Store não implementa o IQueryableUserStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserClaimStore" xml:space="preserve">
    <value>Store não implementa IUserClaimStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserConfirmationStore" xml:space="preserve">
    <value>O Store não implementa IUserConfirmationStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserEmailStore" xml:space="preserve">
    <value>O Store não implementa o IUserEmailStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserLockoutStore" xml:space="preserve">
    <value>O Store não implementa o IUserLockoutStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserLoginStore" xml:space="preserve">
    <value>O Store não implementa o IUserLoginStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserPasswordStore" xml:space="preserve">
    <value>O Store não implementa o IUserPasswordStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserPhoneNumberStore" xml:space="preserve">
    <value>O Store não implementa IUserPhoneNumberStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserRoleStore" xml:space="preserve">
    <value>Store não implementa IUserRoleStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserSecurityStampStore" xml:space="preserve">
    <value>O repositório não implementa IUserSecurityStampStore&lt;TUser&gt;.</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="StoreNotIUserTwoFactorStore" xml:space="preserve">
    <value>Store não implementa IUserTwoFactorStore&lt;TUser&gt;.!</value>
    <comment>error when the store does not implement this interface</comment>
  </data>
  <data name="UserAlreadyHasPassword" xml:space="preserve">
    <value>O usuário já tem uma senha definida.!</value>
    <comment>error when AddPassword called when a user already has a password</comment>
  </data>
  <data name="UserAlreadyInRole" xml:space="preserve">
    <value>Usuário já na função.!</value>
    <comment>Error when a user is already in a role</comment>
  </data>
  <data name="UserIdNotFound" xml:space="preserve">
    <value>UserId não encontrado!</value>
    <comment>No user with this id found</comment>
  </data>
  <data name="UserNameNotFound" xml:space="preserve">
    <value>Usuário '{0}' não existe!</value>
    <comment>error when a user does not exist</comment>
  </data>
  <data name="UserNotInRole" xml:space="preserve">
    <value>O usuário não está na função!</value>
    <comment>Error when a user is not in the role</comment>
  </data>
  <data name="DuplicateUserName" xml:space="preserve">
    <value>O nome de usuário '{0}' já existe.</value>
  </data>
  <data name="DuplicateRoleName" xml:space="preserve">
    <value>O nome da função já existe</value>
  </data>
  <data name="InvalidRoleName" xml:space="preserve">
    <value>O nome da função "{0}" não é válida.</value>
  </data>
  <data name="LoginAlreadyAssociated" xml:space="preserve">
    <value>Um login externo já está associado a esta conta.!</value>
  </data>
  <data name="PasswordRequiresUniqueChars" xml:space="preserve">
    <value>A senha deve conter '{0}' caracteres exclusivos.!</value>
  </data>
  <data name="UserLockoutNotEnabled" xml:space="preserve">
    <value>O bloqueio do usuário não está habilitado!</value>
  </data>
  <data name="RecoveryCodeRedemptionFailed" xml:space="preserve">
    <value>O código de recuperação não foi resgatado!</value>
  </data>
  <data name="ConcurrencyFailure" xml:space="preserve">
    <value>Falha simultânea!</value>
  </data>
  <data name="DefaultIdentityError" xml:space="preserve">
    <value>Erro no sistema de identidade!</value>
  </data>
  <data name="PasswordRequiresNonAlphanumeric" xml:space="preserve">
    <value>A senha deve conter caracteres não alfanuméricos!</value>
  </data>
</root>